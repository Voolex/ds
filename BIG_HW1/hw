{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Большое_ДЗ_1.ipynb\"",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JmblmG7LLIWl"
      },
      "source": [
        "<h2 style=\"text-align: center;\"><b>Домашнее задание. Предобработка данных. Кластеризация при помощи kNN.\n",
        "</b></h2>\n",
        "\n",
        "Ссылка на дз в колаб: \n",
        "\n",
        "\n",
        "В этом домашнем задании нам нужно закрепить базовые понятия машинного обучения и научиться работать с простейшим метрическим алгоритмом кластеризации - kNN.\n",
        "\n",
        "**Правила:**\n",
        "\n",
        "- **Мягкий дедлайн:** 15 января 23:59. При отправке решения до этого момента вы можете исправить найденные ошибки без штрафа до жёсткого дедлайна.\n",
        "- **Жёсткий дедлайн:** 22 января 23:59. Решения, отправленные позже, проверяться не будут, кроме случаев наличия уважительной причины.\n",
        "\n",
        "\n",
        "Решения, размещенные на каких-либо интернет-ресурсах, не принимаются.\n",
        "Для выполнения задания используйте этот ноутбук в качестве основы, ничего не удаляя из него. Пропущенные описания принимаемых аргументов дописать на русском. \n",
        "\n",
        "**ОБЯЗАТЕЛЬНО!**\n",
        "При написании кода придерживайтесь `pep8` и используйте `type hints`.\n",
        "\n",
        "\n",
        "**После жесткого дедлайна задания не принимаются.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vfwl19gBLIUH"
      },
      "source": [
        "## Предсказание оттока телеком компании"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zzuwnvz6LIY4"
      },
      "source": [
        "#### Что такое \"скорость оттока\"?\n",
        "\n",
        "Коэффициент оттока - это процент подписчиков на услугу, которые прекращают свою подписку на услугу в течение заданного периода времени. Для того чтобы компания могла расширить свою клиентуру, ее темпы роста, измеряемые числом новых клиентов, должны превышать темпы оттока. Этот показатель обычно выражается в процентах."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xGQIRZDALIbT"
      },
      "source": [
        "#### Почему отток так важен?\n",
        "\n",
        "Отток клиентов - это термин, используемый в компаний с подписочной моделью ведения бизнеса, для описания потери клиентов. Например, если 10 из 100 подписчиков интернет-провайдера (ISP) отменили свои подписки, скорость оттока для этого провайдера составит 10%.\n",
        "\n",
        "Отток важен, потому что он напрямую влияет на прибыльность вашего сервиса. Принято считать, что прибыльность услуги напрямую связана с ростом ее клиентской базы. Это может привести владельцев бизнеса к выводу, что для того, чтобы увеличить свою клиентскую базу, скорость приобретения новых клиентов должна превышать скорость оттока."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uBE-CE01LIdr"
      },
      "source": [
        "#### Что из себя представляет датасет?\n",
        "\n",
        "Датасет представляет из себя 3333 записи из истории компании о клиентах с 20 колонками. Каждая колонка описывает клиента - его штат проживания, время использования услуги, номер, перечень подписок, время разговора, прочее."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sH_zBlcELIgF"
      },
      "source": [
        "#### В чем состоит ваше задание?\n",
        "\n",
        "Ниже будет представлен конвейер (pipeline) обработки датасета с комментариями. На основе комментариев и результатов уже выполненых ячеек вам нужно будет восстановить код (на основе материалов занятий) по загрузке, обработке и построении модели наших данных. Желательно придерживаться в обработке результатов, которые вы уже увидите в ячейках."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zgQBiSeHLIiU"
      },
      "source": [
        "------\n",
        "\n",
        "## Загрузка данных\n",
        "\n",
        "Загрузка данных может зависить от среды, где вы работаете. \n",
        "\n",
        "Если это гугл колаб - вам необходимо выполнить следующие комманды:\n",
        "\n",
        "В первой вам необходимо перейти по ссылке, авторизироваться со своим аккаунтом, скопировать код из окна и вставить в поле выполнения ячейки."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sjqior08MTAq"
      },
      "source": [
        "Загружаем все необходимые библиотеки"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_oEKlPQ3MKmo"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import sklearn"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dY8V2o78MY80"
      },
      "source": [
        "Открываем склонированную папку"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_y1OKScqLbEg"
      },
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/tixonsit/Sberbank_materials/master/telecom_churn.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "83DjKz7cMkhI"
      },
      "source": [
        "Отображаем данные"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cUmSqnqsMBCL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "outputId": "5ef64e4b-752d-41ee-d7a7-09dca5cdb725"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>phone number</th>\n",
              "      <th>international plan</th>\n",
              "      <th>voice mail plan</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total day charge</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total eve charge</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total night charge</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>total intl charge</th>\n",
              "      <th>customer service calls</th>\n",
              "      <th>churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KS</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>382-4657</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>OH</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>371-7191</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NJ</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>358-1921</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>375-9999</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>OK</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>330-6626</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  state  account length  ...  customer service calls  churn\n",
              "0    KS             128  ...                       1  False\n",
              "1    OH             107  ...                       1  False\n",
              "2    NJ             137  ...                       0  False\n",
              "3    OH              84  ...                       2  False\n",
              "4    OK              75  ...                       3  False\n",
              "\n",
              "[5 rows x 21 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WwR8Kt8zMpdy"
      },
      "source": [
        "В случае, если вы работаете из среды анаконда - вам необходимо положить файл рядом с ноутбуком и выполнить:\n",
        "\n",
        "```\n",
        "df = pd.read_csv('./telecom_churn.csv')\n",
        "```\n",
        "\n",
        " "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OoLBh9biNFX3"
      },
      "source": [
        "## Работа с признаками"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KsnMxQ_JVfKi"
      },
      "source": [
        "#### Визуальный анализ"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fJWb61hmNNm8"
      },
      "source": [
        "Изучим наши данные, какие признаки исходного датасета никак не повлияют на результат прогноза? Выбросим такие столбцы и отобразим результат."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ejcapc6EMCD-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "2cc1c6e7-daa1-4b28-fc79-61a770e9cfc5"
      },
      "source": [
        "# Номер телефона вряд ли повлияет на результат прогноза. Выбросим его\r\n",
        "del df['phone number']\r\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>international plan</th>\n",
              "      <th>voice mail plan</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total day charge</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total eve charge</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total night charge</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>total intl charge</th>\n",
              "      <th>customer service calls</th>\n",
              "      <th>churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KS</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>OH</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NJ</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>OK</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  state  account length  ...  customer service calls  churn\n",
              "0    KS             128  ...                       1  False\n",
              "1    OH             107  ...                       1  False\n",
              "2    NJ             137  ...                       0  False\n",
              "3    OH              84  ...                       2  False\n",
              "4    OK              75  ...                       3  False\n",
              "\n",
              "[5 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j4HurSGIOwnC"
      },
      "source": [
        "Посмотрим на описательную статистику, которая суммирует центральную тенденцию, дисперсию и форму распределения набора данных. Корректно ли все заполнено?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fJ_tT6qrNnzX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "b50acb28-effa-4859-c922-3c7c4b0f5be0"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total day charge</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total eve charge</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total night charge</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>total intl charge</th>\n",
              "      <th>customer service calls</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "      <td>3333.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>101.064806</td>\n",
              "      <td>437.182418</td>\n",
              "      <td>8.099010</td>\n",
              "      <td>179.775098</td>\n",
              "      <td>100.435644</td>\n",
              "      <td>30.562307</td>\n",
              "      <td>200.980348</td>\n",
              "      <td>100.114311</td>\n",
              "      <td>17.083540</td>\n",
              "      <td>200.872037</td>\n",
              "      <td>100.107711</td>\n",
              "      <td>9.039325</td>\n",
              "      <td>10.237294</td>\n",
              "      <td>4.479448</td>\n",
              "      <td>2.764581</td>\n",
              "      <td>1.562856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>39.822106</td>\n",
              "      <td>42.371290</td>\n",
              "      <td>13.688365</td>\n",
              "      <td>54.467389</td>\n",
              "      <td>20.069084</td>\n",
              "      <td>9.259435</td>\n",
              "      <td>50.713844</td>\n",
              "      <td>19.922625</td>\n",
              "      <td>4.310668</td>\n",
              "      <td>50.573847</td>\n",
              "      <td>19.568609</td>\n",
              "      <td>2.275873</td>\n",
              "      <td>2.791840</td>\n",
              "      <td>2.461214</td>\n",
              "      <td>0.753773</td>\n",
              "      <td>1.315491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>23.200000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>1.040000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>74.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>143.700000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>24.430000</td>\n",
              "      <td>166.600000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>14.160000</td>\n",
              "      <td>167.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>7.520000</td>\n",
              "      <td>8.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.300000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>101.000000</td>\n",
              "      <td>415.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>179.400000</td>\n",
              "      <td>101.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>201.400000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>17.120000</td>\n",
              "      <td>201.200000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>9.050000</td>\n",
              "      <td>10.300000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.780000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>127.000000</td>\n",
              "      <td>510.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>216.400000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>36.790000</td>\n",
              "      <td>235.300000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>235.300000</td>\n",
              "      <td>113.000000</td>\n",
              "      <td>10.590000</td>\n",
              "      <td>12.100000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>3.270000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>243.000000</td>\n",
              "      <td>510.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>350.800000</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>59.640000</td>\n",
              "      <td>363.700000</td>\n",
              "      <td>170.000000</td>\n",
              "      <td>30.910000</td>\n",
              "      <td>395.000000</td>\n",
              "      <td>175.000000</td>\n",
              "      <td>17.770000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>5.400000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       account length    area code  ...  total intl charge  customer service calls\n",
              "count     3333.000000  3333.000000  ...        3333.000000             3333.000000\n",
              "mean       101.064806   437.182418  ...           2.764581                1.562856\n",
              "std         39.822106    42.371290  ...           0.753773                1.315491\n",
              "min          1.000000   408.000000  ...           0.000000                0.000000\n",
              "25%         74.000000   408.000000  ...           2.300000                1.000000\n",
              "50%        101.000000   415.000000  ...           2.780000                1.000000\n",
              "75%        127.000000   510.000000  ...           3.270000                2.000000\n",
              "max        243.000000   510.000000  ...           5.400000                9.000000\n",
              "\n",
              "[8 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ISnrHbhF6VgI"
      },
      "source": [
        "Исследуем на наличие пропусков"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9XwJF37R6YsM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e3dddd86-1bd4-40dd-bd5c-37eb97667b0e"
      },
      "source": [
        "df.isnull().any()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "state                     False\n",
              "account length            False\n",
              "area code                 False\n",
              "international plan        False\n",
              "voice mail plan           False\n",
              "number vmail messages     False\n",
              "total day minutes         False\n",
              "total day calls           False\n",
              "total day charge          False\n",
              "total eve minutes         False\n",
              "total eve calls           False\n",
              "total eve charge          False\n",
              "total night minutes       False\n",
              "total night calls         False\n",
              "total night charge        False\n",
              "total intl minutes        False\n",
              "total intl calls          False\n",
              "total intl charge         False\n",
              "customer service calls    False\n",
              "churn                     False\n",
              "dtype: bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T_ehN03yPA2I"
      },
      "source": [
        "Посмотрим на типы данных наших столбцов:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eMDxN9dcOu1R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f732427b-0960-4d15-f2e5-32720c9822cd"
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "state                      object\n",
              "account length              int64\n",
              "area code                   int64\n",
              "international plan         object\n",
              "voice mail plan            object\n",
              "number vmail messages       int64\n",
              "total day minutes         float64\n",
              "total day calls             int64\n",
              "total day charge          float64\n",
              "total eve minutes         float64\n",
              "total eve calls             int64\n",
              "total eve charge          float64\n",
              "total night minutes       float64\n",
              "total night calls           int64\n",
              "total night charge        float64\n",
              "total intl minutes        float64\n",
              "total intl calls            int64\n",
              "total intl charge         float64\n",
              "customer service calls      int64\n",
              "churn                        bool\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kR0_MssXPPz2"
      },
      "source": [
        "Посмотрим как сбалансированны наши классы, можно распечатать или отобразить на грфике. Если не помните почему надо балансировать классы - [тык](https://www.coursera.org/lecture/supervised-learning/niesbalansirovannyie-dannyie-M97UX)\n",
        "\n",
        "Можно увидеть, что данные несбалансированны.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QsRceMBi7mls"
      },
      "source": [
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udw2u9M0PlhQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "outputId": "9a83fe89-0635-4ed5-95c0-151c3c1c3bb4"
      },
      "source": [
        "churn = df.groupby('churn')['churn'].count()\r\n",
        "churn.plot.bar(figsize = (12,6))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc3065ceda0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Id4rTSKVk5S"
      },
      "source": [
        "#### Работа с категориальными признаками"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ZCHmMXqQQ12"
      },
      "source": [
        "Если вы не понимаете логику за работой с котегориальными признаками - посмотрите [сюда](https://www.coursera.org/lecture/supervised-learning/rabota-s-katieghorial-nymi-priznakami-pqU2j), если же не знаете как это сделать в коде - [сюда](https://colab.research.google.com/drive/17UJ3zkE6dUL5UpQnLiaQp3f7BpV6iEss#scrollTo=_238K7-NQajf), пункт про категориальные признаки.\n",
        "\n",
        "Посмотрим на те колонки, в которых тип данных object (строка) и перекодируем их, воспользуемся кодом с занятия."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "likInih_Pljn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "803d5c4f-7840-4104-ab5e-a8d5796f3c0a"
      },
      "source": [
        "from sklearn import preprocessing\n",
        "\n",
        "def number_encode_features(init_df):\n",
        "    result = init_df.copy() # копируем нашу исходную таблицу\n",
        "    encoders = {}\n",
        "    for column in result.columns:\n",
        "        if result.dtypes[column] == np.object: # np.object -- строковый тип / если тип столбца - строка, то нужно его закодировать\n",
        "            encoders[column] = preprocessing.LabelEncoder() # для колонки column создаем кодировщик\n",
        "            result[column] = encoders[column].fit_transform(result[column]) # применяем кодировщик к столбцу и перезаписываем столбец\n",
        "    return result, encoders\n",
        "\n",
        "encoded_data, encoders = number_encode_features(df) # Теперь encoded data содержит закодированные кат. признаки \n",
        "encoded_data.head() "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>international plan</th>\n",
              "      <th>voice mail plan</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total day charge</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total eve charge</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total night charge</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>total intl charge</th>\n",
              "      <th>customer service calls</th>\n",
              "      <th>churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>35</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   state  account length  ...  customer service calls  churn\n",
              "0     16             128  ...                       1  False\n",
              "1     35             107  ...                       1  False\n",
              "2     31             137  ...                       0  False\n",
              "3     35              84  ...                       2  False\n",
              "4     36              75  ...                       3  False\n",
              "\n",
              "[5 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y9Z644nIVR8j"
      },
      "source": [
        "Отобразим сами энкодеры"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DyAu4xKAVWk5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcbe4762-4762-46d2-dade-c8728ceb3172"
      },
      "source": [
        "encoders"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'international plan': LabelEncoder(),\n",
              " 'state': LabelEncoder(),\n",
              " 'voice mail plan': LabelEncoder()}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I6McUFcR8r8u"
      },
      "source": [
        "Выделим целевую переменную в бинарный формат (в отдельную переменную)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HL0fbA4c8rax",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c217568-325d-49c2-91fc-9be49d27deba"
      },
      "source": [
        "y = encoded_data.churn.values.astype(int)\n",
        "y"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, ..., 0, 0, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kCwHJLj3V28A"
      },
      "source": [
        "Выделим целевую переменную в бинарный формат и выкинем ее из обучающей выборки."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PbaziAxO-nwn"
      },
      "source": [
        "encoded_data.drop('churn', axis = 1, inplace = True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CruJ9-HSV1c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "6de80129-80c6-44f4-d6c0-145137418a98"
      },
      "source": [
        "\r\n",
        "encoded_data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>international plan</th>\n",
              "      <th>voice mail plan</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total day charge</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total eve charge</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total night charge</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>total intl charge</th>\n",
              "      <th>customer service calls</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>35</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   state  account length  ...  total intl charge  customer service calls\n",
              "0     16             128  ...               2.70                       1\n",
              "1     35             107  ...               3.70                       1\n",
              "2     31             137  ...               3.29                       0\n",
              "3     35              84  ...               1.78                       2\n",
              "4     36              75  ...               2.73                       3\n",
              "\n",
              "[5 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RXTrWXnzZBTm"
      },
      "source": [
        "Посмотрим на распределение величин по признакам в наших данных"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ITo8_PqAPFOf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 963
        },
        "outputId": "ee5b9bb2-71dd-4ec9-e09c-aefb0fb15673"
      },
      "source": [
        "#plt.figure(figsize=(16,8))\r\n",
        "encoded_data.hist(figsize=(20,10), xlabelsize = 8, ylabelsize = 8, bins = 20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fc3059280f0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3058d52e8>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc305906550>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3058b87b8>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fc30586ca20>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc305820c88>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3057d6ef0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc305797160>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fc3057971d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc30577e668>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3057328d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3056e6b38>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fc305698da0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3056cefd0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc30568d2b0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3058ca2b0>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fc305740d30>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3055a1390>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc3055545f8>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fc305586860>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 20 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "24PuLGTDaAa0"
      },
      "source": [
        "Построим матрицу корреляций, выбросим данные с единичной линейной зависимостью - они (шум) просто повысят вычислительную сложность."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5qP5phgrZ_3L",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 660
        },
        "outputId": "58419aa1-2b39-42d9-ff4a-80222a020a55"
      },
      "source": [
        "plt.subplots(figsize=(10,10))\r\n",
        "sns.heatmap(encoded_data.corr(), square=True)\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tpybWKbXB3FA"
      },
      "source": [
        "encoded_data.drop(['total day charge', 'total eve charge', 'total night charge', 'total intl charge'], axis = 1, inplace = True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D26zNoYqaadS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "718af15b-79f7-4adc-8fbc-65e6146310b5"
      },
      "source": [
        "encoded_data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>account length</th>\n",
              "      <th>area code</th>\n",
              "      <th>international plan</th>\n",
              "      <th>voice mail plan</th>\n",
              "      <th>number vmail messages</th>\n",
              "      <th>total day minutes</th>\n",
              "      <th>total day calls</th>\n",
              "      <th>total eve minutes</th>\n",
              "      <th>total eve calls</th>\n",
              "      <th>total night minutes</th>\n",
              "      <th>total night calls</th>\n",
              "      <th>total intl minutes</th>\n",
              "      <th>total intl calls</th>\n",
              "      <th>customer service calls</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>35</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   state  account length  ...  total intl calls  customer service calls\n",
              "0     16             128  ...                 3                       1\n",
              "1     35             107  ...                 3                       1\n",
              "2     31             137  ...                 5                       0\n",
              "3     35              84  ...                 7                       2\n",
              "4     36              75  ...                 3                       3\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tYMj4euycFgc"
      },
      "source": [
        "## Работа с данными"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "66uOoy0NZL7V"
      },
      "source": [
        "Создадим обучающую выборку Х, переведем получанные цифровые данные в np.array"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XxqEThbKPcuu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5bb0fcc1-1788-4c7d-f248-79a39283c9b4"
      },
      "source": [
        "X = np.array(encoded_data.values)\r\n",
        "X"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 16. , 128. , 415. , ...,  10. ,   3. ,   1. ],\n",
              "       [ 35. , 107. , 415. , ...,  13.7,   3. ,   1. ],\n",
              "       [ 31. , 137. , 415. , ...,  12.2,   5. ,   0. ],\n",
              "       ...,\n",
              "       [ 39. ,  28. , 510. , ...,  14.1,   6. ,   2. ],\n",
              "       [  6. , 184. , 510. , ...,   5. ,  10. ,   2. ],\n",
              "       [ 42. ,  74. , 415. , ...,  13.7,   4. ,   0. ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "smawbeJEZftc"
      },
      "source": [
        "Нормализуем наши данные. Если не помните зачем это делать? [тык](https://www.coursera.org/lecture/supervised-learning/masshtabirovaniie-priznakov-ozNT3)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8Gstc1AeZaER",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d22bd35-fff2-485d-fcb4-c9eef766ab82"
      },
      "source": [
        "from sklearn.preprocessing import scale\r\n",
        "X_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=True)\r\n",
        "X_scaled"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.6786493 ,  0.67648946, -0.52360328, ..., -0.08500823,\n",
              "        -0.60119509, -0.42793202],\n",
              "       [ 0.6031696 ,  0.14906505, -0.52360328, ...,  1.24048169,\n",
              "        -0.60119509, -0.42793202],\n",
              "       [ 0.33331299,  0.9025285 , -0.52360328, ...,  0.70312091,\n",
              "         0.21153386, -1.1882185 ],\n",
              "       ...,\n",
              "       [ 0.87302621, -1.83505538,  1.71881732, ...,  1.3837779 ,\n",
              "         0.61789834,  0.33235445],\n",
              "       [-1.35329082,  2.08295458,  1.71881732, ..., -1.87621082,\n",
              "         2.24335625,  0.33235445],\n",
              "       [ 1.07541867, -0.67974475, -0.52360328, ...,  1.24048169,\n",
              "        -0.19483061, -1.1882185 ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eoD3dH39emcu"
      },
      "source": [
        "Надо помнить, что наша выборка несбралансирована, так что надо будет провести ее балансировку, в ходе занятия было показано, что будет (у precision 0.18), если ее не проводить:\n",
        "\n",
        "Найдем по y индексы клиентов, которые относятся к классу \"не ушили\"\n",
        "и, перемешав выборку, обрежем ее до размеров \"ушедших\". Т.к. это на занятии не разбиралось - код прилагается.\n",
        "\n",
        "Альтернативой выбрасыванию ценных данных - модифицировать шаг градиентного спуска для класса с несбалансированными данными.\n",
        "\n",
        "Большинство алгоритмов sklearn имеют аргумент class_weight, который принимает на вход частоты каждого распознаваемого класса или считает их вытоматически, если указано 'balanced'\n",
        "\n",
        "Пример из алгоримта SVM:\n",
        "\n",
        "class_weight dict or ‘balanced’, default=None\n",
        "\n",
        "Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SdY39BgtBPaq"
      },
      "source": [
        "Использовать модифицированный шаг градиентного спуска предпочтительнее, если алгоритм поддерживает его (в большинстве случаев так и есть). В качестве примера возможного варинта балансировки - убрать лишние данные. Ниже представлен код, который находит индексы в зависимости от метки класса и выбрасывает лишние."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CwhnZeETetA7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b1be06e2-a1ab-4b04-df4e-81229ecc1d5e"
      },
      "source": [
        "# np.argwhere вернет индексы тех элементов массива y (целевой переменной), где значение 0\n",
        "not_churn_ids = np.argwhere(y == 0).flatten()\n",
        "print('Всего не ушедших', len(not_churn_ids))\n",
        "not_churn_ids"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Всего не ушедших 2850\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([   0,    1,    2, ..., 3330, 3331, 3332])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VIMv8J_Qgyv5"
      },
      "source": [
        "Перемешаем массив с выбранным random state (чтоб в дальнейшем у нас совпадали выборки) выберем в нем \"лишние\" id тех, кто остались (кто портит нам прогноз алгоритма). Кол-во \"лишних\" = кол-во оставшихся - кол-во ушедшых."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TxuSyyoWgqPx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8cd40599-98e3-4fd4-c5ee-3268d6ffed4b"
      },
      "source": [
        "from sklearn.utils import shuffle\n",
        "\n",
        "not_churn_ids = shuffle(not_churn_ids, random_state = 42)\n",
        "# найдем \"лишних\", для этого обрежем найденные id на кол-во ушедших (внутри len)\n",
        "not_churn_ids = not_churn_ids[len(np.argwhere(y == 1).flatten()):]\n",
        "print(len(not_churn_ids))\n",
        "# отображаем кол-во и сами id, которые мы должны выкинуть\n",
        "not_churn_ids"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2367\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 877, 3298,  614, ..., 1291, 1482,  989])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q2kX34VqjZdL"
      },
      "source": [
        "Проверим, сбалансированны ли классы\n",
        "\n",
        "по идее (оставшиеся) - (\"лишние\") = (ушедшие)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r-6VUu19jX-Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a55cafe0-27a8-493b-8efa-6bb0a093f127"
      },
      "source": [
        "len(np.argwhere(y == 0).flatten()) - len(not_churn_ids) == len(np.argwhere(y == 1).flatten())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4z4g4BASkFfw"
      },
      "source": [
        "Теперь можно выкинуть \"лишние\" id из X и y"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kHGBQfETkLJV"
      },
      "source": [
        "# np.delete принимает массив, индексы, которые выбросить и по какой оси выкидывать\n",
        "X = np.delete(X_scaled, not_churn_ids, 0)\n",
        "y = np.delete(y, not_churn_ids, 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SJgJGHeKk1s2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "96f8332f-6966-4584-ebfc-d3f7709b5299"
      },
      "source": [
        "# отобразим итоговый размер признаков датасета\n",
        "X.shape, y.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((966, 15), (966,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CjAu5HahDFQa"
      },
      "source": [
        "Теперь видим, что классы сбалансированы."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Twc1jIYZk80m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3616c03-ce9a-495b-ee6d-c6e04f814652"
      },
      "source": [
        "pd.Series(y).value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    483\n",
              "0    483\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N8OsWvtidj6V"
      },
      "source": [
        "## Создание алгоритмов\n",
        "\n",
        "Посмотрим на 2 типа алгоритмов, которые мы прошли - KNN и линейную модель. В случае KNN будем решать задачу классификации. В случае линейного классификатора, для демонстрации всей обработки, будем использовать регрессию."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vFcU7ISHzLxJ"
      },
      "source": [
        "Разделим нашу выборку на test train в соотношении 85 на 15 %"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oYRicWgyzLHD"
      },
      "source": [
        "X_train = X[:int(len(X)*0.85)]\r\n",
        "y_train = y[:int(len(y)*0.85)]\r\n",
        "\r\n",
        "X_test = X[int(len(X)*0.85):]\r\n",
        "y_test = y[int(len(y)*0.85):]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t36f783h1iP9"
      },
      "source": [
        "#### KNN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U3pFXR9exFoY"
      },
      "source": [
        "Построим сетку, по аналогии с занятием 6, для перебора гиперпараметра для нахождения лучшего гиперпараметра KNN, пройдем 100 значений (от 1 до 100)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AuUxM39qZ0Zo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09b145e6-9547-4b0e-d0aa-ae8e4c65783d"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\r\n",
        "from sklearn.model_selection import GridSearchCV\r\n",
        "\r\n",
        "knn = KNeighborsClassifier()\r\n",
        "knn_grid = {'n_neighbors': np.array(np.linspace(1, 100, 100), dtype='int')}\r\n",
        "gs = GridSearchCV(knn, knn_grid, cv=5)\r\n",
        "gs.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, error_score=nan,\n",
              "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                                            metric='minkowski',\n",
              "                                            metric_params=None, n_jobs=None,\n",
              "                                            n_neighbors=5, p=2,\n",
              "                                            weights='uniform'),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'n_neighbors': array([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n",
              "        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,\n",
              "        27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,\n",
              "        40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,\n",
              "        53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,\n",
              "        66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,\n",
              "        79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,\n",
              "        92,  93,  94,  95,  96,  97,  98,  99, 100])},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OcoqFDoayu0K"
      },
      "source": [
        "# Функция отрисовки графиков\n",
        "def grid_plot(x, y, x_label, title, y_label='cross_val, accuracy'):\n",
        "    # определили размер графика\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    # добавили сетку на фон\n",
        "    plt.grid(True)\n",
        "    # построили по х - число соседей, по y - точность\n",
        "    plt.plot(x, y, 'go-')\n",
        "    # добавили подписи осей и название графика\n",
        "    plt.xlabel(x_label)\n",
        "    plt.ylabel(y_label)\n",
        "    plt.title(title)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SLQmzfuzDSAz"
      },
      "source": [
        "Строим график зависимости качества от числа соседей\n",
        "\n",
        "подсказка: результаты обучения хранятся в атрибуте cv_results_ объекта gs (grid search из библиотеки sklearn)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2djFxlQly0Xk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "outputId": "917aa425-5428-476b-de91-0565bd7e9cb2"
      },
      "source": [
        "grid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Hc_d_bTy_70"
      },
      "source": [
        "Отобразим лучший параметр (y gs есть атрибуты best_param, best_score)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mYndn8fty2jE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a068a02a-4892-49d9-fde1-d774b809d34b"
      },
      "source": [
        "print(gs.best_params_, gs.best_score_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'n_neighbors': 15} 0.8112416851441242\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oi_U0PkKz4qw"
      },
      "source": [
        "Инициализируем отдельный классификатор с лучшим значением, найденным на предыдущего перебора"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-H6KXy8Dy_C7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41368c8d-3f76-46b2-e417-75e54ae58892"
      },
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=15)\r\n",
        "knn.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yrC_TdVz1Bd9"
      },
      "source": [
        "Получим предсказания от классификатора"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F43Wnbbt1Bjn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a36cda84-0d59-4f93-ecbb-d7ebd994bf9a"
      },
      "source": [
        "preds = knn.predict(X_test)\r\n",
        "preds"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,\n",
              "       1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,\n",
              "       0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n",
              "       0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,\n",
              "       0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,\n",
              "       1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n",
              "       1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PUsFrWB-0rjB"
      },
      "source": [
        "Посмотрим на метрики качества через classification report"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xTs06Pwb0pgu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6ebe8cc-c263-476f-ab68-392d8283f921"
      },
      "source": [
        "from sklearn import metrics\r\n",
        "\r\n",
        "print(metrics.classification_report(y_test, preds))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.69      0.89      0.78        65\n",
            "           1       0.89      0.68      0.77        80\n",
            "\n",
            "    accuracy                           0.77       145\n",
            "   macro avg       0.79      0.78      0.77       145\n",
            "weighted avg       0.80      0.77      0.77       145\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y3UXeIIV13ps"
      },
      "source": [
        "#### Логистическая регрессия\n",
        "\n",
        "Здесь Вам нужно применить логистическую регрессию, по аналогии с занятием (10 лекция) и оценить результат по $R^2$ и MAE.\n",
        "Теперь без подсказок"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4gcn0AFx9JHm"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\r\n",
        "import warnings\r\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8npk8Ylme3mQ",
        "outputId": "61d16ca9-f3a7-4d8a-dd6a-197de20ee2d7"
      },
      "source": [
        "param_grid = {\"C\":list(range(1, 10)),\r\n",
        "              \"penalty\":[\"l1\",\"l2\"]}\r\n",
        "\r\n",
        "gs = GridSearchCV(LogisticRegression(),\r\n",
        "                  param_grid,\r\n",
        "                  cv=5,\r\n",
        "                  #scoring=['r2', 'neg_mean_absolute_error'],\r\n",
        "                  #refit=False\r\n",
        "                  )\r\n",
        "\r\n",
        "# Обучаем его\r\n",
        "gs.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, error_score=nan,\n",
              "             estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
              "                                          fit_intercept=True,\n",
              "                                          intercept_scaling=1, l1_ratio=None,\n",
              "                                          max_iter=100, multi_class='auto',\n",
              "                                          n_jobs=None, penalty='l2',\n",
              "                                          random_state=None, solver='lbfgs',\n",
              "                                          tol=0.0001, verbose=0,\n",
              "                                          warm_start=False),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'C': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
              "                         'penalty': ['l1', 'l2']},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cUoBNxVui1WI",
        "outputId": "ea47e8de-e063-4875-ff5c-0fde4dadf665"
      },
      "source": [
        "print(gs.best_score_)\r\n",
        "print(gs.best_params_)\r\n",
        "print(gs.best_estimator_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.7612934220251294\n",
            "{'C': 2, 'penalty': 'l2'}\n",
            "LogisticRegression(C=2, class_weight=None, dual=False, fit_intercept=True,\n",
            "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
            "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
            "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
            "                   warm_start=False)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O7ukAqrnkOSR",
        "outputId": "36cb1332-0079-46a8-9317-0558947925c5"
      },
      "source": [
        "alg = gs.best_estimator_\r\n",
        "alg.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=2, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oLHJq7etkY_f",
        "outputId": "f920fc02-361f-4b53-e838-12ccf354d9c6"
      },
      "source": [
        "preds_log = alg.predict(X_test)\r\n",
        "preds_log"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0,\n",
              "       0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n",
              "       0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,\n",
              "       1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n",
              "       1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n",
              "       1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v4CxVjbHkgWn",
        "outputId": "eeb19a6e-3054-4a94-9b26-2729242fc25e"
      },
      "source": [
        "metrics.r2_score(y_test, preds_log)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.07980769230769247"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k8NZ2Niikk5f",
        "outputId": "eae1a509-b47c-4dd9-f0ce-f998d3a99822"
      },
      "source": [
        "metrics.median_absolute_error(y_test, preds_log)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SHER6tscuuiM",
        "outputId": "67531f26-1aa8-40af-8e43-fa93bee05951"
      },
      "source": [
        "metrics.mean_squared_error(y_test, preds_log)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.22758620689655173"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MWCwbdZLuzA1",
        "outputId": "226c86b6-bbfb-411a-e1e2-acfa6bd020d9"
      },
      "source": [
        "metrics.mean_absolute_error(y_test, preds_log)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.22758620689655173"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    }
  ]
}
